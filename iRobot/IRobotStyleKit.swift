//
//  IRobotStyleKit.swift
//  iRobot
//
//  Created by Eddie Koranek on 3/29/17.
//  Copyright Â© 2017 drawChicken. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class IRobotStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfCameraOverlay: UIImage?
        static var cameraOverlayTargets: [AnyObject]?
    }

    //// Drawing Methods

    public dynamic class func drawCameraOverlay(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1280, height: 1920), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1280, height: 1920), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1280, y: resizedFrame.height / 1920)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 640.5, y: 64))
        bezierPath.addCurve(to: CGPoint(x: 305.66, y: 246.49), controlPoint1: CGPoint(x: 514.66, y: 64), controlPoint2: CGPoint(x: 398.63, y: 131.98))
        bezierPath.addCurve(to: CGPoint(x: 87, y: 960), controlPoint1: CGPoint(x: 172.78, y: 410.15), controlPoint2: CGPoint(x: 87, y: 668.86))
        bezierPath.addCurve(to: CGPoint(x: 640.5, y: 1856), controlPoint1: CGPoint(x: 87, y: 1454.85), controlPoint2: CGPoint(x: 334.81, y: 1856))
        bezierPath.addCurve(to: CGPoint(x: 1194, y: 960), controlPoint1: CGPoint(x: 946.19, y: 1856), controlPoint2: CGPoint(x: 1194, y: 1454.85))
        bezierPath.addCurve(to: CGPoint(x: 640.5, y: 64), controlPoint1: CGPoint(x: 1194, y: 465.15), controlPoint2: CGPoint(x: 946.19, y: 64))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 1280, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 1280, y: 1920), controlPoint1: CGPoint(x: 1280, y: 0), controlPoint2: CGPoint(x: 1280, y: 1920))
        bezierPath.addLine(to: CGPoint(x: 0, y: 1920))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0))
        bezierPath.addLine(to: CGPoint(x: 1280, y: 0))
        bezierPath.addLine(to: CGPoint(x: 1280, y: 0))
        bezierPath.close()
        UIColor.black.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    //// Generated Images

    public dynamic class var imageOfCameraOverlay: UIImage {
        if Cache.imageOfCameraOverlay != nil {
            return Cache.imageOfCameraOverlay!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 1280, height: 1920), false, 0)
            IRobotStyleKit.drawCameraOverlay()

        Cache.imageOfCameraOverlay = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCameraOverlay!
    }

    //// Customization Infrastructure

    @IBOutlet dynamic var cameraOverlayTargets: [AnyObject]! {
        get { return Cache.cameraOverlayTargets }
        set {
            Cache.cameraOverlayTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: IRobotStyleKit.imageOfCameraOverlay)
            }
        }
    }




    @objc(IRobotStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
